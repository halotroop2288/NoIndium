buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'fabric-loom' version '1.1-SNAPSHOT'
    id 'maven-publish'
    id "com.matthewprenger.cursegradle" version '1.4.0'
    id "com.modrinth.minotaur" version '1.2.1'
}

version = project.mod_version
group = project.maven_group

def ENV = System.getenv()

def RELEASE_NAME = "[${project.minecraft_version}] ${version}"
def RELEASE_FILE = "${buildDir}/libs/${archivesBaseName}-${version}.jar"

@SuppressWarnings('GrMethodMayBeStatic')
def getChangeLog() {
    return """1.1.0+1.18.2:
- Removed Progaurd and Shadow from buildscript.
- Removed Omega Config dependency.
- Migrated to official Mojang mappings"""
}

System.out.println(getChangeLog())

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings() // Avoid having to manually change mappings version at all
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // For simple JSON5 config
    implementation include("blue.endless:jankson:${project.jankson_version}")
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release.set 17
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

curseforge {
    if (ENV.CURSEFORGE_API_KEY) {
        apiKey = ENV.CURSEFORGE_API_KEY
    }

    project {
        id = project.curseforge_id
        changelog = getChangeLog()
        releaseType = "release"
        addGameVersion project.minecraft_version
        addGameVersion "Fabric"

        mainArtifact(file(RELEASE_FILE)) {
            displayName = RELEASE_NAME
            relations {
                requiredDependency 'fabric-api'
            }
        }

        afterEvaluate {
            uploadTask.dependsOn("remapJar")
        }
    }

    options {
        forgeGradleIntegration = false
    }
}

//Modrinth publishing
import com.modrinth.minotaur.TaskModrinthUpload
import com.modrinth.minotaur.request.VersionType

tasks.register('modrinth', TaskModrinthUpload) {
	dependsOn remapJar
	onlyIf {
		ENV.MODRINTH_TOKEN
	}
	token = ENV.MODRINTH_TOKEN

	projectId = project.modrinth_id
	changelog = getChangeLog()

	versionNumber = version
	versionName = RELEASE_NAME
	versionType = VersionType.valueOf("RELEASE")

	uploadFile = file(RELEASE_FILE)

	addGameVersion(project.minecraft_version as String)
	addLoader("fabric")
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            url "https://maven.cafeteria.dev/releases"
            credentials {
                username = System.getenv().mcdUsername
                password = System.getenv().mcdPassword
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}
